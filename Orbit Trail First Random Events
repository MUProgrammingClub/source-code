// Orbit Trail.cpp : Defines the entry point for the console application.
// Orbit Trail is a space-based Oregon Trail game/Dating sim in which players are tasked with escaping Earth in the event
// of the sun exploding, while also looking stylish.

#include "stdafx.h"
#include <iostream>
#include <string>
#include <Windows.h>
#include <ctime>
#include <cstdlib>

using namespace std;


// Function Prototypes
void displayStartup();
void startupMenu();
string enterName();
void getCrew();
int randomNumberGenerator();
void shopMenu(double&);
void foodShop(double&);
void partsShop(double&);
void gunShop(double&);
void firstAidShop(double&);
void checkInventory();
void stayOrLeave();
void displayHealth();
void randomEvent();
void borderCustoms();
int randomCharacter();

// Prototypes for specific random events
void spaceRace();
void zeroGravityIncident();
void shipRepair();


// Global Variables
const int CREW_MEMBERS = 5;
string characters[CREW_MEMBERS];		// Defines array for character names. 0 is main character, 1-4 are crew members.
int characterHP[CREW_MEMBERS] = { 10, 10, 10, 10, 10 };		// Defines amount of health for each character.
int shipHP = 100;			// Defines ship's health.
double money = 1000;		// Defines default starting money.
int gameState = 1;			// Variable controlling progress of the game. Used for determining which function to return to.
int dayNumber = 1;			// Variable controlling amount of days that have passed.
double distanceFromEarth = 0;	// Variable controlling distance from Earth.

const int ITEM_AMOUNT = 18;

string inventoryNames[ITEM_AMOUNT] = { "Freeze Dried Beef", "Freeze Dried Pot Pie", "Freeze Dried Soup", "Freeze Dried Ice Cream", "Holographic Meatloaf",				// Contains all item names
"Rocket Fuel (1 gallon)", "Scrap Metal", "Copper Wire", "Tool Kit", "Space Blaster", "Space Blaster Ammo (12 Shots)",
"Space Rifle", "Space Rifle Ammo (24 Shots)", "Beam Sword", "Bandage", "Antidote", "Oxygen Tank", "First Ait Kit" };
int inventoryAmounts[ITEM_AMOUNT];																																																																// Contains amount of all items

int _tmain(int argc, _TCHAR* argv[])
{
	srand(time(NULL));

	displayStartup();						// Displays opening text

	getCrew();								// Gets crew member names

	startupMenu();							// Displays text before the shops menu, then brings player to shops

	system("cls");
	cout << "You depart planet Earth, taking one last look at your favorite convenience store, knowing you'll never see it again.\n"		// Displays text before leaving shops
		<< "The road ahead will be a difficult one, with many dangerous events. Enjoy your journey!" << endl;
	system("pause");

	// Random Event 1
	randomEvent();

	// Random Event 2
	randomEvent();

	// Random Event 3
	randomEvent();

	system("cls");
	displayHealth();
	system("pause");
  
  //Leaving Earth
  borderCustoms();
	//Starting Area

	//Random event check
	//Random event check
	//Random event check

	//Checkpoint 1

	//Random event check
	//Random event check
	//Random event check

	//Checkpoint 2

	system("pause");

	return 0;
}


// This function displays the startup story and adds the typing effect.
void displayStartup()
{
	cout << "*****************************************" << endl
		<< "*                                       *" << endl
		<< "*        Welcome to Orbit Trail!        *" << endl
		<< "*                                       *" << endl
		<< "*****************************************" << endl;

	string intro = "Right now in a galaxy you currently reside in...\n\nThe sun has sustained life on Earth for thousands of years.\nIt is in the process of becoming a raging supergiant on\nthe brink of supernova. Citizens of Earth are encouraged \nto evacuate by any means possible. You and your shipmates\nhave decided the best means of survival would be to\nget to the neighboring Andromeda Galaxy";
	string dramaticIntro = ".....before it's too late.";

	for (int i = 0; i < intro.size(); i++) {
		cout << intro[i];
		Sleep(1);
	}

	cout << endl;

	for (int i = 0; i < dramaticIntro.size(); i++) {
		cout << dramaticIntro[i];
		Sleep(1);
	}

	cout << endl;
}


// This function gets input from the user for the names of the player and the crew members.
void getCrew()
{
	cout << "What is your name?" << endl;
	characters[0] = enterName();

	cout << "Enter your crew: " << endl;
	cout << "1: ";
	characters[1] = enterName();
	cout << "2: ";
	characters[2] = enterName();
	cout << "3: ";
	characters[3] = enterName();
	cout << "4: ";
	characters[4] = enterName();
}


// This function will display the first menu in which users can select shops, etc.
void startupMenu()
{
	system("cls");
	cout << "Before leaving Earth, you should buy supplies and equipment. \n"
		<< "You can purchase anything you need on Amazon. \n\n";
	system("pause");
	shopMenu(money);
}


// This function will provide a general shop outline.
void shopMenu(double& currency)
{
	system("cls");
	int userChoice = 0;

	cout << "Balance: $" << currency << endl << endl;		// Displays player's current amount of money.

	cout << "Select what you would like to buy:" << endl;
	cout << "1: Food" << endl;
	cout << "2: Spare Parts" << endl;
	cout << "3: Guns and Ammunition" << endl;
	cout << "4: First Aid" << endl;
	cout << "5: Check Inventory" << endl;
	cout << "6: Exit Shop Menu" << endl;

	cin >> userChoice;

	while (userChoice < 0 || userChoice > 6)
	{
		cout << "Enter a valid choice!";
		cin >> userChoice;
	}

	switch (userChoice)					// Switch statement that controls what shop the player enters.
	{
	case 1:								// Case 1: Food Store
		foodShop(currency);
		break;
	case 2:								// Case 2: Spare Part Store
		partsShop(currency);
		break;
	case 3:								// Case 3: Gun and Ammo Store
		gunShop(currency);
		break;
	case 4:								// Case 4: First Aid Store
		firstAidShop(currency);
		break;
	case 5:								// Case 5: Checks Inventory
		checkInventory();
		break;
	case 6:								// Case 6: Exit store menu
		stayOrLeave();
		//Exit Shop and prompt to start journey. Maybe give a confirmation if sure player is ready to leave?
		break;
	}

}


// Displays the Default Food Shop Menu
void foodShop(double& currency)
{
	system("cls");
	int selection = 0;
	cout << "Current Balance: $" << currency << endl << endl;

	cout << "Welcome to the food store. We specialize in freeze dried foods, guaranteed to satisfy your hunger in space.\n"
		<< "Be sure to stock up on plenty of food (and holographic meatloaf) before you head out!" << endl << endl;

	cout << "What would you like to buy?" << endl;
	cout << "1: Freeze Dried Beef....................$4.00" << endl
		<< "2: Freeze Dried Pot Pie.................$5.00" << endl
		<< "3: Freeze Dried Soup....................$4.00" << endl
		<< "4: Freeze Dried Ice Cream...............$3.00" << endl
		<< "5: Holographic Meatloaf.................$10.00" << endl
		<< "6: Exit Shop" << endl;

	cin >> selection;

	while (selection < 0 || selection > 6)
	{
		cout << "That is not on the menu! Enter a valid choice!" << endl;
		cin >> selection;
	}

	// Switch statement controlling food shop choices
	switch (selection)
	{
		// Case 1: Freeze Dried Beef
	case 1:
		int amount;

		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)										// Input validation for amount
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 4.00)) < 0)					// Checks to make sure player has enough money
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 4.00);				// Subtracts price from currency
		inventoryAmounts[0] += amount;

		foodShop(currency);									// Returns to shop menu with updated balance
		break;

		// Case 2: Freeze Dried Pot Pie
	case 2:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 5.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 5.00);

		inventoryAmounts[1] += amount;

		foodShop(currency);
		break;

		// Case 3: Freeze Dried Soup
	case 3:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 4.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 4.00);

		inventoryAmounts[2] += amount;

		foodShop(currency);
		break;

		// Case 4: Freeze Dried Ice Cream
	case 4:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 3.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 3.00);

		inventoryAmounts[3] += amount;

		foodShop(currency);
		break;

		// Case 5: Holographic Meatloaf
	case 5:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 10.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 10.00);

		inventoryAmounts[4] += amount;

		foodShop(currency);
		break;

		// Case 6: Exit Shop
	case 6:
		cout << "Thanks for coming!" << endl;
		system("pause");
		shopMenu(currency);
		break;
	}

}


// This function defines a default parts shop
void partsShop(double& currency)
{
	system("cls");
	int selection = 0;
	cout << "Current Balance: $" << currency << endl << endl;

	cout << "Welcome to the parts shop. We sell rocket fuel and raw materials that you'll need to fix your ship on your journey.\n"
		<< "Also be sure to buy a tool kit if you want to be able to fix certain problems that might occur along the way." << endl << endl;

	cout << "What would you like to buy?" << endl;
	cout << "1: Rocket Fuel (1 gallon)....................$15.00" << endl
		<< "2: Scrap Metal...............................$3.00" << endl
		<< "3: Copper Wire...............................$4.00" << endl
		<< "4: Tool Kit..................................$10.00" << endl
		<< "5: Exit Shop" << endl;

	cin >> selection;

	while (selection < 0 || selection > 5)
	{
		cout << "Enter a valid choice!" << endl;
		cin >> selection;
	}

	// Switch statement controlling parts shop choices.
	switch (selection)
	{
		//Case 1: Rocket Fuel
	case 1:
		int amount;

		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)									// Input validation for amount
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 15.00)) < 0)						// Checks if player has enough money
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 15.00);			// Subtracts price from currency

		inventoryAmounts[5] += amount;

		partsShop(currency);							// Returns to the shop menu with updated balance

		break;

		// Case 2: Scrap Metal
	case 2:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 3.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 3.00);

		inventoryAmounts[6] += amount;

		partsShop(currency);

		break;

		// Case 3: Copper Wire
	case 3:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 4.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 4.00);

		inventoryAmounts[7] += amount;

		partsShop(currency);

		break;

		// Case 4: Tool Kit
	case 4:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 10.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 10.00);

		inventoryAmounts[8] += amount;

		partsShop(currency);

		break;

		// Case 5: Exit Shop
	case 5:
		cout << "Thanks, come again!" << endl;
		system("pause");
		shopMenu(currency);
		break;
	}

}


// This function displays the default gun shop
void gunShop(double& currency)
{
	system("cls");
	int selection = 0;
	cout << "Current Balance: $" << currency << endl << endl;

	cout << "Welcome to the gun shop. Here you can buy weapons and ammunition to use on the way. Those space buffalos won't hunt\n"
		<< "themselves! Hunting is an important skill so you don't have to rely on stores for your food supply." << endl << endl;

	cout << "What would you like to buy?" << endl;
	cout << "1: Space Blaster............................$100.00" << endl
		<< "2: Space Blaster Ammo (12 Shots)............$25.00" << endl
		<< "3: Space Rifle..............................$200.00" << endl
		<< "4: Space Rifle Ammo (24 Shots)..............$20.00" << endl
		<< "5: Beam Sword...............................$50.00" << endl
		<< "6: Exit Shop" << endl;

	cin >> selection;

	while (selection < 0 || selection > 6)					// Input validation for selection
	{
		cout << "Enter a valid choice!" << endl;
		cin >> selection;
	}

	// Switch statement controlling gun shop choices.
	switch (selection)
	{
		// Case 1: Space Blaster
	case 1:
		int amount;
		if (inventoryAmounts[9])									// Checks the player's inventory for an existing weapon
		{
			cout << "You already have a Space Blaster!" << endl;
			system("pause");
			gunShop(currency);
		}
		cout << "How many would you like?" << endl;
		cin >> amount;

		
		if (amount < 0)										// Input validation for amount purchased
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}
		else if (amount > 1)
		{
			cout << "You only need one Space Blaster! Enter again:" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 100.00)) < 0)						// Checks if player has enough money
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 100.00);							// Subtracts price from currency

		inventoryAmounts[9] += amount;

		gunShop(currency);									// Returns to shop menu with updated balance
		break;

		// Case 2: Space Blaster Ammo
	case 2:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 25.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 25.00);

		inventoryAmounts[10] += amount;

		gunShop(currency);
		break;

		// Case 3: Space Rifle
	case 3:
		if (inventoryAmounts[11])									// Checks the player's inventory for an existing weapon
		{
			cout << "You already have a Space Rifle!" << endl;
			system("pause");
			gunShop(currency);
		}
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}
		else if (amount > 1)
		{
			cout << "You only need one Space Rifle! Enter again:" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 200.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 200.00);

		inventoryAmounts[11] += amount;

		gunShop(currency);
		break;

		// Case 4: Space Rifle Ammo
	case 4:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 20.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 20.00);

		inventoryAmounts[12] += amount;

		gunShop(currency);
		break;

		// Case 5: Beam Sword
	case 5:
		if (inventoryAmounts[13])									// Checks the player's inventory for an existing weapon
		{
			cout << "You already have a Beam Sword!" << endl;
			system("pause");
			gunShop(currency);
		}
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}
		else if (amount > 1)
		{
			cout << "You only need one Beam Sword! Enter again:" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 50.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 50.00);

		inventoryAmounts[13] += amount;

		gunShop(currency);
		break;

		// Case: Exit Shop
	case 6:
		cout << "Thanks, good luck on your journey!" << endl;
		system("pause");
		shopMenu(currency);
		break;
	}
}


// This function displays the menu for the first aid shop
void firstAidShop(double& currency)
{
	system("cls");
	int selection = 0;
	cout << "Current Balance: $" << currency << endl << endl;

	cout << "Welcome to the first aid shop. Here you can buy medical supplies to keep your crew in good health on your journey.\n" << endl << endl;


	cout << "What would you like to buy?" << endl;
	cout << "1: Bandage...................................$5.00" << endl
		<< "2: Andtidote.................................$10.00" << endl
		<< "3: Oxygen Tank...............................$15.00" << endl
		<< "4: First Aid Kit.............................$20.00" << endl
		<< "5: Exit Shop" << endl;

	cin >> selection;

	while (selection < 0 || selection > 5)
	{
		cout << "Enter a valid choice!" << endl;
		cin >> selection;
	}

	// Switch statement controlling first aid shop choices.
	switch (selection)
	{
		//Case 1: Bandage
	case 1:
		int amount;

		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)									// Input validation for amount
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 5.00)) < 0)						// Checks if player has enough money
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 5.00);			// Subtracts price from currency

		inventoryAmounts[14] += amount;

		firstAidShop(currency);							// Returns to the shop menu with updated balance

		break;

		// Case 2: Antidote
	case 2:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 10.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 10.00);

		inventoryAmounts[15] += amount;

		firstAidShop(currency);

		break;

		// Case 3: Oxygen Tank
	case 3:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 15.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 15.00);

		inventoryAmounts[16] += amount;

		firstAidShop(currency);

		break;

		// Case 4: First Aid Kit
	case 4:
		cout << "How many would you like?" << endl;
		cin >> amount;

		if (amount < 0)
		{
			cout << "Enter a valid amount!" << endl;
			cin >> amount;
		}

		while ((currency - (amount * 20.00)) < 0)
		{
			cout << "You don't have enough money to buy that! Enter another amount, or if you cannot afford any, enter 0." << endl;
			cin >> amount;
		}

		currency = currency - (amount * 20.00);

		inventoryAmounts[17] += amount;

		firstAidShop(currency);

		break;

		// Case 5: Exit Shop
	case 5:
		cout << "Good luck!" << endl;
		system("pause");
		shopMenu(currency);
		break;
	}
}


// This function asks the user if they want to leave the shops.
void stayOrLeave()
{
	system("cls");
	char stayOrLeave;
	cout << "Once you leave the shops, you will embark on your journey to Andromeda.\n"
		<< "Make sure you have bought all the supplies you think you'll need!\n"
		<< "Are you sure you want to leave? (Y/N)\n";
	cin >> stayOrLeave;

	if (stayOrLeave == 'Y' || stayOrLeave == 'y')
		//launch function to start journey
		cout << "The Journey Begins..." << endl;
	else if (stayOrLeave == 'N' || stayOrLeave == 'n')
		shopMenu(money);
	else
	{
		cout << "Enter a valid choice! (Y/N)" << endl;
		cin >> stayOrLeave;
	}
}


// This function asks the user to enter a name and returns it.
string enterName()
{
	string name;
	getline(cin, name);

	return name;
}


// This function activates and defines the ranges for random events
void randomEvent()
{
	int eventNum = randomNumberGenerator();


	if (eventNum > 0 && eventNum < 22)
		spaceRace();
	else if (eventNum >= 22 && eventNum < 43)
		zeroGravityIncident();
	else if (eventNum >= 43 && eventNum < 65)
		shipRepair();
	
}


// This function displays the health of all crew members
void displayHealth()
{
	cout << "Ship Health: " << shipHP << endl << endl;

	for (int count = 0; count < CREW_MEMBERS; count++)											// Steps through character names array
	{
		if (characterHP[count] > 0)																// If character is alive
			cout << characters[count] << "\t\t" << "HP: " << characterHP[count] << endl;
		else                                                                                    // If character is dead
			cout << characters[count] << " (DEAD)" << "\t\t" << "HP: " << characterHP[count] << endl;
	}

	cout << endl;
}


// In this random event, the player has the option of racing another ship for $100
void spaceRace()
{
	system("cls");

	char raceChoice = 0;

	displayHealth();

	cout << "Another shuttle (with flames painted on it) pulls up next to you and" << endl;
	cout << "challenges you to a race. He will give you 100 dollars if you win, but" << endl;
	cout << "if you lose, you have to give him 100 dollars. (You have $" << money << ")" << endl;
	cout << "Do you choose to race? (Y/N)" << endl;


	cin >> raceChoice;

	int win = randomNumberGenerator();				// Generates integer to determine if player wins or loses.
	

	if (raceChoice == 'Y' || raceChoice == 'y')		// If the player accepts the race
	{
		if (money >= 100)							// Checks if the player has enough money
		{
			if (win > 47)							// If the player wins
			{
				cout << "You win!!! You have gained 100 gold and slightly more self-confidence." << endl;
				money += 100;
			}

			else                                    // If the player loses
			{
				cout << "You accidentally had your spaceship in reverse. If the goal was behind" << endl;
				cout << "you you would have won." << endl;
				cout << "You lose 100 gold." << endl;

				money -= 100;
			}
		}
		else if (money < 100)						// Executed if the player doesn't have enough money to race
		{
			cout << "You don't have enough money to race. Everyone makes fun of you.\n";
		}
	}
	else if (raceChoice == 'N' || raceChoice == 'n')			// If the player chooses not to race
	{
		cout << "You choose not to race this intimidating spaceship.\n"
			<< "The opposing racer trash talks you, and your crew loses respect for you.\n";
	}
	else
	{
		while (raceChoice)										// Input validation for raceChoice
		{
			cout << "Input a valid answer!" << endl;
			cin >> raceChoice;
		}
	}
	system("pause");
}

void borderCustoms()
{
	system("cls");
	int customsChoice = 0;

	cout << "As you approach the border from Earth to interstellar space \n";
	//maybe check if player bought weapons from shop before displaying this line?
	cout << "A customs officer approaches your vehicle as your crew scrambles to hide your weapons \n";
	cout << " \"Greetings fellas, how are we doing today?\" \n";
	
}

// In this random event, a crew member is disoriented in zero gravity and bumps his/her head.
void zeroGravityIncident()
{
	system("cls");

	displayHealth();

	int name = randomCharacter();		// Holds value of random character to use multiple times.

	cout << characters[name] << " was disoriented in zero gravity and bumped his/her head.\n"
		<< "What a sad way to lose 2 health." << endl;
	
	characterHP[name] -= 2;				// Decreases character's health by 2
	
	system("pause");
}


// In this random event, the ship malfunctions and you need to repair it or risk losing ship HP.
void shipRepair()
{
	system("cls");

	displayHealth();

	cout << "Oh no! Your ship's electronics are malfunctioning. Luckily for you\n"
		<< "the simple fix only requires 3 copper wire." << endl;

	system("pause");

	if (inventoryAmounts[7] >= 3)
	{
		cout << "3 of your copper wire is used to repair the ship and can once again listen to Rock 107!" << endl;
		inventoryAmounts[7] -= 3;																// Decreases copper wire by 3 to fix ship.
	}
	else if (inventoryAmounts[7] < 3)
	{
		cout << "Unfortunately, you don't have enough copper wire to fix the ship\n"
			<< "and you must now suffer the voyage without satelite radio." << endl;
		cout << "...also your ship loses 8 health." << endl;

		shipHP -= 8;				// Decreases ship HP by 8.
	}

	system("pause");

}


// This function generates a random number between 1 and 64
int randomNumberGenerator()
{
	return rand() % 64 + 1;
}


// This function generates a random number from 0 to 4 for random character selection.
int randomCharacter()
{
	return rand() % 5;
}


// This function displays the player's inventory
void checkInventory()
{
	system("cls");
	for (int i = 0; i < ITEM_AMOUNT; i++) {
		if (inventoryAmounts[i] != 0) {
			cout << inventoryNames[i] << "\t\t" << inventoryAmounts[i] << endl;
		}
	}

	cout << endl;
	system("pause");


	switch (gameState)
	{
	case 1:
		shopMenu(money);
		break;
	}

}
